pipeline {
    agent any

    triggers {
        githubPush()
    }

    // environment {
    //     AWS_REGION = 'us-east-1'
    //     ECR_REGISTRY = '529881641329.dkr.ecr.us-east-1.amazonaws.com'
    //     TAG = 'latest'
    // }

    options {
        buildDiscarder(logRotator(numToKeepStr: '7'))
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: '')
        string(name: 'DB_IMAGE_NAME', defaultValue: 'db', description: '')
        string(name: 'AUTH_IMAGE_NAME', defaultValue: 'auth', description: '')
        string(name: 'REDIS_IMAGE_NAME', defaultValue: 'redis', description: '')
        string(name: 'UI_IMAGE_NAME', defaultValue: 'ui', description: '')
    }

    stages {
        // stage('Print Docker Version') {
        //     steps {
        //         script {
                
        //             sh """
        //             apt update
        //             sleep 10
        //             apt  install docker.io
        //             """
        //         }
        //     }
        // }

        stage('Checkout') {
            steps {
                dir("${WORKSPACE}/code") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            url: 'https://github.com/DEL-ORG/a1franklin-jenkins.git',
                            credentialsId: 'jenkins-github-new'
                        ]]
                    ])
                }
            }
        }

        stage('pushing to auth') {
            steps {
                script {
                    dir("${WORKSPACE}/code/auth"){
                        sh """
                        cat Dockerfile
                        """
                    }
                    
                        
                }
            }
        }

         stage('pushing to db') {
            steps {
                script {
                    dir("${WORKSPACE}/code/db"){
                        sh """
                        cat Dockerfile
                        """
                    }
                    
                        
                }
            }
        }

         stage('pushing to redis') {
            steps {
                script {
                     dir("${WORKSPACE}/code/redis"){
                        sh """
                        cat Dockerfile
                        """
                     }
                    
                        
                }
            }
        }

         stage('pushing to ui') {
            steps {
                script {
                     dir("${WORKSPACE}/code/ui") {
                        sh """
                        cat Dockerfile
                        """

                     }      
                }
            }
        }

        stage('pushing to weather') {
            steps {
                script {
                     dir("${WORKSPACE}/code/weather") {
                        sh """
                        cat Dockerfile
                        """

                     }      
                }
            }
        }


        // stage('ECR Login') {
        //     steps {
        //         script {
        //             withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-credentials', region: AWS_REGION]]) {
        //                 sh "sudo aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}"
        //             }
        //         }
        //     }
        // }

        // stage('Build DB') {
        //     steps {
        //         script {
        //             dir("${WORKSPACE}/code/db") {
        //                 sh "sudo docker build -t ${ECR_REGISTRY}/${params.DB_IMAGE_NAME}:${TAG} ."
        //             }
        //         }
        //     }
        // }

        // stage('Build Auth') {
        //     steps {
        //         script {
        //             dir("${WORKSPACE}/code/auth") {
        //                 sh "sudo docker build -t ${ECR_REGISTRY}/${params.AUTH_IMAGE_NAME}:${TAG} ."
        //             }
        //         }
        //     }
        // }

        // stage('Build Redis') {
        //     steps {
        //         script {
        //             dir("${WORKSPACE}/code/redis") {
        //                 sh "sudo docker build -t ${ECR_REGISTRY}/${params.REDIS_IMAGE_NAME}:${TAG} ."
        //             }
        //         }
        //     }
        // }

        // stage('Build UI') {
        //     steps {
        //         script {
        //             dir("${WORKSPACE}/code/ui") {
        //                 sh "sudo docker build -t ${ECR_REGISTRY}/${params.UI_IMAGE_NAME}:${TAG} ."
        //             }
        //         }
        //     }
        // }

        // stage('Push Images to ECR') {
        //     steps {
        //         script {
        //             sh "sudo docker push ${ECR_REGISTRY}/${params.DB_IMAGE_NAME}:${TAG}"
        //             sh "sudo docker push ${ECR_REGISTRY}/${params.AUTH_IMAGE_NAME}:${TAG}"
        //             sh "sudo docker push ${ECR_REGISTRY}/${params.REDIS_IMAGE_NAME}:${TAG}"
        //             sh "sudo docker push ${ECR_REGISTRY}/${params.UI_IMAGE_NAME}:${TAG}"
        //         }
        //     }
        // }
    }

    post {
        always {                                     
            script {
                sh "sudo docker logout ${ECR_REGISTRY}"
            }
        }
    }
}
